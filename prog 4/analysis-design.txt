Design


Generator

generate:
generate primarily keeps track of the number of times a string is processed and passes an initial string from intput into a nextGeneration function that processes each letter its self.

nextGeneration:
nextGeneration does the grunt work for generate. It goes through each character in a string until all characters have been processed and replaced with a specified string.


InterpreterTurtle

drawTriangle:
drawTriangle takes in inputs and passes them to a helper function that ultimately does all of the work. It exists so that the user doesn't need to set which side to start work on--something required for input in the triangleDrawer method.

triangleDrawer:
This method counts the number of times a side is drawn. In this case, its a triangle, so it checks to make sure that it doesn't go over 3 sides. It uses a helper function to actually draw the sides.

drawSide:
Drawside is in charge of articulating the exact specifications for a side. It uses generate to get a string representing the side after its undergone the proper amount of recursion.

interpret:
Interpret does the actual work of drawing each side. It moves through each of the characters in the specification string generated by drawSide and does a certain action depending on what the character is. It does this recursively on each character until it has interpreted the entire string.

getReady:
Getready is a simple method that properly orients the current turtle on a specific island. It also prepares it to draw.

scale:
Scale is a method that is used in interpret to make sure that the general size of a shape is always the same regardless of how many times the specification string is processed.




Analysis

Generator
generate:
Input: String initiator, String generator, number of generations (int)
Output: A string thats been processed across the specified number of generations, with each letter (key) being replaced with generator string.
Constrains: None
Assumption: None
Relationships: None

nextGeneration:
Input: String initiator, String generator
Output: A new string that replaces the intitiator string given to it by processing all instances of a specific letter with the String generator.
Constraints: All characters are either the key, +, or -.
Assumptions: None
Relationships: None



InterpreterTurtle:
drawTriangle:
Input: String instruction and double faceLength
Output: None
Contraints: None
Assumptions: faceLength > 0
Relationships: None

triangleDrawer:
Input: String instruction, double faceLength, and current side number
Output: None
Constraints: None
Assumptions: We always start on the first side.
Relationships: Triangles have 3 sides

drawSide:
Input: String instruction and doube faceLength
Output: None
Constraints: All characters in the string are either the key, +, or -.
Assumption: None
Relationships: None

interpret:
Input: String side, double faceLength
Output: None
Constraints: All string characters are the key, +, or -.
Assumptions: None
Relationships: None

getReady:
Input: An Island object
Output: None
Constraints: Island has to exist.
Assumptions: Island is 1000x1000
Relationships: None

scale:
Input: double faceLength and int generations
Output: a double represented a scaled faceLength, based on number of generations the string went through.
Constraints: None
Assumptions: None
Relationships: Every time the shape recurses, it grows in length, it becomes 3 times bigger.

